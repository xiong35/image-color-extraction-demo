{"version":3,"sources":["utils/file2DataUrl.ts","App.tsx","hooks/useImage.ts","index.tsx"],"names":["file2DataUrl","file","a","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","curNum","extractor","ColorExtractor","App","imageRef","useRef","useState","url","setUrl","compresionRate","topColorCount","config","setConfig","isProcessing","setIsProcessing","colors","setColors","textColor","setTextColor","useEffect","current","extractColor","then","console","log","chooseReadableColor","className","ref","src","alt","type","onChange","e","target","files","toString","value","onClick","map","c","style","background","color","count","Number","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAAO,SAAeA,EAAtB,kC,4CAAO,WAA4BC,GAA5B,SAAAC,EAAA,+EACE,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACd,IAAKF,EAAOG,OAAQ,KAAM,iBAC1BL,EAAQE,EAAOG,SAEjBH,EAAOI,QAAUL,EACjBC,EAAOK,cAAcV,OARlB,4C,iCCiBHW,EAAS,EAEPC,EAAY,IAAIC,iBAEP,SAASC,IACtB,IAAQC,ECjBD,CAAEA,SAFQC,iBAAyB,ODmBlCD,SACR,EAAsBE,mBAAS,8CAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA4BF,mBAAiB,CAC3CG,eAAgB,GAChBC,cAAe,IAFjB,mBAAOC,EAAP,KAAeC,EAAf,KAIA,EAAwCN,oBAAS,GAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KACA,EAA4BR,mBAAsB,IAAlD,mBAAOS,EAAP,KAAeC,EAAf,KAEA,EAAkCV,mBAAS,CAAC,OAAQ,SAApD,mBAAOW,EAAP,KAAkBC,EAAlB,KAmBA,OAjBAC,qBAAU,WACRlB,EAAUW,UAAUD,GACfP,EAASgB,UACVP,IAEJC,GAAgB,GAEhBb,EACGoB,aAAajB,EAASgB,SACtBE,MAAK,WACJC,QAAQC,IAAIvB,EAAUc,QACtBC,EAAUf,EAAUc,QAAU,IAC9BG,EAAajB,EAAUwB,0BAExBH,MAAK,kBAAMR,GAAgB,UAC7B,CAACH,EAAQJ,IAGV,sBAAKmB,UAAU,OAAf,UACGnB,GAAO,qBAAKmB,UAAU,QAAQC,IAAKvB,EAAUwB,IAAKrB,EAAKsB,IAAI,KAC5D,uBACEH,UAAU,eACVI,KAAK,OACLC,SAAQ,uCAAE,WAAOC,GAAP,eAAA1C,EAAA,0DACJ0C,EAAEC,OAAOC,QAASF,EAAEC,OAAOC,MAAM,GAD7B,gCAEY9C,EAAa4C,EAAEC,OAAOC,MAAM,IAFxC,OAEA3B,EAFA,OAGNC,EAAOD,EAAI4B,YAHL,2CAAF,wDAQV,uBACEL,KAAK,SACLM,MAAM,SACNC,QAAS,WACP7B,EAAO,wCAAD,SACuCR,EAAS,EAAK,EADrD,YAMTa,GAAgB,+CAEjB,qBAAKa,UAAU,QAAf,SACGX,EAAOuB,KAAI,SAACC,GAAD,OACV,sBAAKb,UAAU,aAAf,UACE,qBACEA,UAAU,mBACVc,MAAO,CAAEC,WAAYF,EAAEG,SAExBH,EAAEI,cAKT,sBAAKjB,UAAU,WAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,oDAAuBf,EAAOD,iBAC9B,uBACEgB,UAAU,6BACVI,KAAK,SACLM,MAAOzB,EAAOD,cACdqB,SAAU,SAACC,GAAD,OACRpB,EAAU,2BACLD,GADI,IAEPD,cACEkC,OAAOZ,EAAEC,OAAOG,QAAU,EAAIQ,OAAOZ,EAAEC,OAAOG,OAAS,WAKjE,sBAAKV,UAAU,gBAAf,UACE,oDAAuBf,EAAOF,kBAC9B,uBACEqB,KAAK,QACLJ,UAAU,sBACVU,MAA+B,IAAxBzB,EAAOF,eACdsB,SAAU,SAACC,GAAD,OACRpB,EAAU,2BACLD,GADI,IAEPF,eACEmC,OAAOZ,EAAEC,OAAOG,OAAS,IAAM,IAC3B,IACAQ,OAAOZ,EAAEC,OAAOG,OAAS,gBAOzC,sBACEV,UAAU,OACVc,MAAO,CAAEC,WAAYxB,EAAU,GAAIyB,MAAOzB,EAAU,IAFtD,UAIE,qBAAKW,IAAKrB,EAAKmB,UAAU,aAAaG,IAAI,KAC1C,sBAAKH,UAAU,YAAf,UACE,qBAAKA,UAAU,aAAf,+BACA,qBAAKA,UAAU,eAAf,mHE7HVmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.183ca8e0.chunk.js","sourcesContent":["export async function file2DataUrl(file: File): Promise<string | ArrayBuffer> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      if (!reader.result) throw \"cannot convert\";\r\n      resolve(reader.result);\r\n    };\r\n    reader.onerror = reject;\r\n    reader.readAsDataURL(file);\r\n  });\r\n}\r\n","import \"./App.scss\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { ColorExtractor } from \"image-color-extraction\";\r\n\r\nimport { file2DataUrl } from \"./utils/file2DataUrl\";\r\nimport { useImage } from \"./hooks/useImage\";\r\n\r\ntype Config = {\r\n  compresionRate: number;\r\n  topColorCount: number;\r\n};\r\ntype ColorInfo = {\r\n  color: string;\r\n  count: number;\r\n};\r\n\r\nlet curNum = 3;\r\n\r\nconst extractor = new ColorExtractor();\r\n\r\nexport default function App() {\r\n  const { imageRef } = useImage();\r\n  const [url, setUrl] = useState(\"http://blog.xiong35.cn/color-extract/3.jpg\");\r\n  const [config, setConfig] = useState<Config>({\r\n    compresionRate: 0.4,\r\n    topColorCount: 6,\r\n  });\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [colors, setColors] = useState<ColorInfo[]>([]);\r\n\r\n  const [textColor, setTextColor] = useState([\"#fff\", \"#000\"]);\r\n\r\n  useEffect(() => {\r\n    extractor.setConfig(config);\r\n    if (!imageRef.current) return;\r\n    if (isProcessing) return;\r\n\r\n    setIsProcessing(true);\r\n\r\n    extractor\r\n      .extractColor(imageRef.current)\r\n      .then(() => {\r\n        console.log(extractor.colors);\r\n        setColors(extractor.colors || []);\r\n        setTextColor(extractor.chooseReadableColor());\r\n      })\r\n      .then(() => setIsProcessing(false));\r\n  }, [config, url]);\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      {url && <img className=\"image\" ref={imageRef} src={url} alt=\"\" />}\r\n      <input\r\n        className=\"image-select\"\r\n        type=\"file\"\r\n        onChange={async (e) => {\r\n          if (e.target.files && e.target.files[0]) {\r\n            const url = await file2DataUrl(e.target.files[0]);\r\n            setUrl(url.toString());\r\n          }\r\n        }}\r\n      />\r\n\r\n      <input\r\n        type=\"button\"\r\n        value=\"switch\"\r\n        onClick={() => {\r\n          setUrl(\r\n            `http://blog.xiong35.cn/color-extract/${(++curNum % 4) + 1}.jpg`\r\n          );\r\n        }}\r\n      />\r\n\r\n      {isProcessing && <h2>Processing...</h2>}\r\n\r\n      <div className=\"color\">\r\n        {colors.map((c) => (\r\n          <div className=\"color-item\">\r\n            <div\r\n              className=\"color-item-block\"\r\n              style={{ background: c.color }}\r\n            ></div>\r\n            {c.count}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"settings\">\r\n        <div className=\"settings-color_count\">\r\n          <div>top color count: {config.topColorCount}</div>\r\n          <input\r\n            className=\"settings-color_count-input\"\r\n            type=\"number\"\r\n            value={config.topColorCount}\r\n            onChange={(e) =>\r\n              setConfig({\r\n                ...config,\r\n                topColorCount:\r\n                  Number(e.target.value) >= 2 ? Number(e.target.value) : 2,\r\n              })\r\n            }\r\n          />\r\n        </div>\r\n        <div className=\"settings-rate\">\r\n          <div>compresion rate: {config.compresionRate}</div>\r\n          <input\r\n            type=\"range\"\r\n            className=\"settings-rate-input\"\r\n            value={config.compresionRate * 100}\r\n            onChange={(e) =>\r\n              setConfig({\r\n                ...config,\r\n                compresionRate:\r\n                  Number(e.target.value) / 100 < 0.02\r\n                    ? 0.02\r\n                    : Number(e.target.value) / 100,\r\n              })\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className=\"demo\"\r\n        style={{ background: textColor[0], color: textColor[1] }}\r\n      >\r\n        <img src={url} className=\"demo-image\" alt=\"\" />\r\n        <div className=\"demo-text\">\r\n          <div className=\"demo-title\">Lorem ipsum dolor</div>\r\n          <div className=\"demo-content\">\r\n            sit amet consectetur adipisicing elit. Omnis labore perferendis\r\n            aliquid modi qui beatae enim\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useRef } from \"react\";\r\n\r\nexport function useImage() {\r\n  const imageRef = useRef<HTMLImageElement>(null);\r\n\r\n  return { imageRef };\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}